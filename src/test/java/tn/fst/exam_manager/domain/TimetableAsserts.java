package tn.fst.exam_manager.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TimetableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimetableAllPropertiesEquals(Timetable expected, Timetable actual) {
        assertTimetableAutoGeneratedPropertiesEquals(expected, actual);
        assertTimetableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimetableAllUpdatablePropertiesEquals(Timetable expected, Timetable actual) {
        assertTimetableUpdatableFieldsEquals(expected, actual);
        assertTimetableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimetableAutoGeneratedPropertiesEquals(Timetable expected, Timetable actual) {
        assertThat(expected)
            .as("Verify Timetable auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimetableUpdatableFieldsEquals(Timetable expected, Timetable actual) {
        assertThat(expected)
            .as("Verify Timetable relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTimetableUpdatableRelationshipsEquals(Timetable expected, Timetable actual) {
        assertThat(expected)
            .as("Verify Timetable relationships")
            .satisfies(e -> assertThat(e.getProfessor()).as("check professor").isEqualTo(actual.getProfessor()));
    }
}
