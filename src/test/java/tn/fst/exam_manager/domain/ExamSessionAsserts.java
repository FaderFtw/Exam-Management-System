package tn.fst.exam_manager.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExamSessionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExamSessionAllPropertiesEquals(ExamSession expected, ExamSession actual) {
        assertExamSessionAutoGeneratedPropertiesEquals(expected, actual);
        assertExamSessionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExamSessionAllUpdatablePropertiesEquals(ExamSession expected, ExamSession actual) {
        assertExamSessionUpdatableFieldsEquals(expected, actual);
        assertExamSessionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExamSessionAutoGeneratedPropertiesEquals(ExamSession expected, ExamSession actual) {
        assertThat(expected)
            .as("Verify ExamSession auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExamSessionUpdatableFieldsEquals(ExamSession expected, ExamSession actual) {
        assertThat(expected)
            .as("Verify ExamSession relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getSessionCode()).as("check sessionCode").isEqualTo(actual.getSessionCode()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e ->
                assertThat(e.getAllowParallelStudies()).as("check allowParallelStudies").isEqualTo(actual.getAllowParallelStudies())
            )
            .satisfies(e ->
                assertThat(e.getAllowOwnClassSupervision())
                    .as("check allowOwnClassSupervision")
                    .isEqualTo(actual.getAllowOwnClassSupervision())
            )
            .satisfies(e ->
                assertThat(e.getAllowCombineClasses()).as("check allowCombineClasses").isEqualTo(actual.getAllowCombineClasses())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExamSessionUpdatableRelationshipsEquals(ExamSession expected, ExamSession actual) {
        assertThat(expected)
            .as("Verify ExamSession relationships")
            .satisfies(e -> assertThat(e.getSessionType()).as("check sessionType").isEqualTo(actual.getSessionType()))
            .satisfies(e -> assertThat(e.getDepartments()).as("check departments").isEqualTo(actual.getDepartments()));
    }
}
